{"version":3,"sources":["containers/MainPage/Loadable.js","components/Header/index.js","containers/App/index.js","serviceWorker.js","index.js","helper/storage.js","utils/APIContext.js","utils/API.js","components/LoadingIndicator/index.js"],"names":["Loadable","loader","__webpack_require__","e","then","bind","loading","react_default","a","createElement","LoadingIndicator","size","Header","Box","Header_Header","position","Heading","level","margin","defaultTheme","global","colors","brand","white","black","font","family","App","_useState","useState","getFromLocalStorage","_useState2","Object","slicedToArray","pokemonList","setPokemonList","useEffect","_fetchPokemonAPI","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","sent","data","results","stop","apply","this","arguments","fetchPokemonAPI","saveInLocalStorage","Grommet","theme","ResponsiveContext","Consumer","APIContext","Provider","value","components_Header","react_router","path","component","MainPage","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","key","item","itemStr","JSON","stringify","localStorage","setItem","getItem","parse","react__WEBPACK_IMPORTED_MODULE_0__","n","React","createContext","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","create","baseURL","responseType","LoadingArea","styled","div","_templateObject","props","color","react__WEBPACK_IMPORTED_MODULE_1___default","react_spinners__WEBPACK_IMPORTED_MODULE_2__","sizeUnit","defaultProps"],"mappings":"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","file":"static/js/main.865a23ce.chunk.js","sourcesContent":["import React from 'react'\r\nimport Loadable from 'react-loadable'\r\n\r\nimport LoadingIndicator from '../../components/LoadingIndicator/index'\r\n\r\nexport default Loadable({\r\n  loader: () => import('./index'),\r\n  loading() {\r\n    return <LoadingIndicator size={7} />\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { Header as Appbar } from 'grommet-controls'\r\nimport { Box, Heading } from 'grommet'\r\n\r\nconst Header = () => (\r\n  <Box>\r\n    <Appbar position=\"sticky\">\r\n      <Heading level={2} margin=\"none\">\r\n        Pokedex\r\n      </Heading>\r\n    </Appbar>\r\n  </Box>\r\n)\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Grommet, ResponsiveContext } from 'grommet'\r\nimport { Route } from 'react-router-dom'\r\nimport APIContext from '../../utils/APIContext'\r\nimport axios from '../../utils/API'\r\nimport MainPage from '../MainPage/Loadable'\r\nimport Header from '../../components/Header/index'\r\nimport { saveInLocalStorage, getFromLocalStorage } from '../../helper/storage'\r\n\r\nconst defaultTheme = {\r\n  global: {\r\n    colors: {\r\n      brand: '#2E4779',\r\n      white: '#ffffff',\r\n      black: '#000000',\r\n    },\r\n    font: {\r\n      family: 'Poppins',\r\n    },\r\n  },\r\n}\r\nfunction App() {\r\n  const [pokemonList, setPokemonList] = useState(\r\n    getFromLocalStorage('pokemonList') || [],\r\n  )\r\n\r\n  useEffect(() => {\r\n    async function fetchPokemonAPI() {\r\n      const response = await axios('?limit=30')\r\n      setPokemonList(response.data.results)\r\n    }\r\n    fetchPokemonAPI()\r\n    saveInLocalStorage('pokemonList', pokemonList)\r\n  }, [pokemonList])\r\n  return (\r\n    <Grommet theme={defaultTheme}>\r\n      <ResponsiveContext.Consumer>\r\n        {size => {\r\n          return (\r\n            <APIContext.Provider value={pokemonList}>\r\n              <Header />\r\n              <MainPage size={size} />\r\n              <MainPage />\r\n              <Route path=\"/\" component={MainPage} />\r\n            </APIContext.Provider>\r\n          )\r\n        }}\r\n      </ResponsiveContext.Consumer>\r\n    </Grommet>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './containers/App/index'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n\r\n  document.getElementById('root'),\r\n)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","const saveInLocalStorage = (key, item) => {\r\n  const itemStr = JSON.stringify(item)\r\n  localStorage.setItem(key, itemStr)\r\n}\r\n\r\nconst getFromLocalStorage = key => {\r\n  const itemStr = localStorage.getItem(key)\r\n  const item = JSON.parse(itemStr)\r\n  return item\r\n}\r\n\r\nexport { saveInLocalStorage, getFromLocalStorage }\r\n","import React from 'react'\r\n\r\nconst APIContext = React.createContext()\r\n\r\nexport default APIContext\r\n","import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://pokeapi.co/api/v2/pokemon',\r\n  // baseURL: 'https://pokeapi.co/api/v2/pokemon?limit=25',\r\n  responseType: 'json',\r\n})\r\n","import React from 'react'\r\nimport { DotLoader } from 'react-spinners'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LoadingArea = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n\r\nfunction LoadingIndicator(props) {\r\n  const { size, color } = props\r\n  return (\r\n    <LoadingArea>\r\n      <DotLoader size={size} sizeUnit=\"em\" color={color} />\r\n    </LoadingArea>\r\n  )\r\n}\r\n\r\nLoadingIndicator.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n  color: PropTypes.string,\r\n}\r\n\r\nLoadingIndicator.defaultProps = {\r\n  color: '#000000',\r\n}\r\n\r\nexport default LoadingIndicator\r\n"],"sourceRoot":""}